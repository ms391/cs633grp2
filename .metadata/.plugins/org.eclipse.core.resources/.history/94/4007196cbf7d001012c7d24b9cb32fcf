package org.bu.cs633.grp2.search;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.Field.Store;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.MMapDirectory;
import org.apache.lucene.util.Version;

import org.bu.cs633.grp2.data.CrawlEntity;
import org.bu.cs633.grp2.data.HibernateSingleton;

public class Searcher {
	private static Searcher instance = null;
	
	private Analyzer analyzer;
	private IndexWriter writer;
	private IndexSearcher searcher;
	private QueryParser parser;
	private Directory indexDirectory;
	
	protected Searcher()
	{
		List<CrawlEntity> entities = HibernateSingleton.getCrawlEntities();
		indexDirectory = new MMapDirectory(createTempDir());
		
		analyzer = new StandardAnalyzer(Version.LUCENE_31);
		writer = new IndexWriter()
		
		for(CrawlEntity entity : entities)
		{
			Document document = new Document();
			document.add(new Field("text", entity.getWords(), Field.Store.YES, Field.Index.ANALYZED));
			document.add(new Field("url", entity.getUrl(), Field.Store.YES, Field.Index.NOT_ANALYZED));
		}
		
	}
	
	public static synchronized Searcher getInstance()
	{
		if (instance == null)
			instance = new Searcher();
		
		return instance;		
	}
	
	protected static File createTempDir()
	{
		final String basePath = System.getProperty("java.io.tmpdir");
		
		Random rnd = new Random();
		int random = 1 + rnd.nextInt();
		
		File tempDir = new File(basePath + File.separator + "searcher" + random + "_index");
		
		if (tempDir.exists() == false)
			tempDir.mkdir();

		tempDir.deleteOnExit();
		
		return tempDir;
	}
}
